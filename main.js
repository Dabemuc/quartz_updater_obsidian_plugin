/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var M=Object.prototype.hasOwnProperty;var F=(r,s)=>{for(var t in s)w(r,t,{get:s[t],enumerable:!0})},q=(r,s,t,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let n of P(s))!M.call(r,n)&&n!==t&&w(r,n,{get:()=>s[n],enumerable:!(e=A(s,n))||e.enumerable});return r};var R=r=>q(w({},"__esModule",{value:!0}),r);var L={};F(L,{default:()=>f});module.exports=R(L);var i=require("obsidian"),E=require("crypto"),U=require("util"),$={backendUrl:""},f=class extends i.Plugin{async onload(){await this.loadSettings();let t=this.addRibbonIcon("folder-sync","Quartz Sync",e=>{new b(this.app,this.settings).open()});this.addCommand({id:"open-quartz-sync-modal",name:"Open quartz sync modal",callback:()=>{new b(this.app,this.settings).open()}}),this.addSettingTab(new S(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},$,await this.loadData())}async saveSettings(){this.settings.backendUrl.endsWith("/")&&(this.settings.backendUrl=this.settings.backendUrl.slice(0,-1)),await this.saveData(this.settings)}},c="not-started",m="",u="",b=class extends i.Modal{constructor(t,e){super(t);this.hashContent=t=>(0,E.createHash)("sha256").update(t).digest("hex");this.settings=e}onOpen(){let{contentEl:t}=this,e=t.createDiv("quartz-sync-modal");e.createEl("h2",{text:"Quartz Sync"}),e.createEl("p",{text:"This will attempt to sync all files marked with the quartz-sync=true frontmatter to the configured quartz_updater backend."});let n=e.createEl("button",{text:"Start sync"});e.createEl("h3",{text:"Sync status:"});let l=e.createEl("p",{text:c});e.createEl("h3",{text:"Client manifest generated:"});let d=e.createEl("p",{text:"..."});e.createEl("h3",{text:"Server response:"});let y=e.createEl("p",{text:"..."});n.addEventListener("click",()=>this.handleSync(l,n,y,d))}async handleSync(t,e,n,l){this.startStatusUpdate(t,e),m="",u="",c="started";try{if(!this.settings.backendUrl||this.settings.backendUrl==="")throw new Error("Backend URL is not set");let d=this.app.vault.getFiles().filter(a=>{var h;let o=(h=this.app.metadataCache.getFileCache(a))==null?void 0:h.frontmatter;return o&&o["quartz-sync"]==="true"});l.innerText=`Files to sync: 
 ${d.map(a=>a.path).join(`
`)}`;let y=await Promise.all(d.map(async a=>{l.innerText+=`
 Building manifest for ${a.path}`;let o=this.app.vault.getAbstractFileByPath(a.path);if(l.innerText+=`
 FileReadable: 
 ${(0,U.inspect)(o,{depth:2,colors:!0})}`,!o||!(o instanceof i.TFile))throw new Error(`File ${a.path} could not be read`);return l.innerText+=`
 File content: 
 ${await this.app.vault.read(o)}`,{path:a.path,hash:this.hashContent(await this.app.vault.read(o))}}));c="manifest-built",l.innerText+=`
 Generated Manifest: 
 ${JSON.stringify(y)}`;let T=await fetch(this.settings.backendUrl+"/request-update",{method:"POST",mode:"cors",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({manifest:y})});c="manifest-sent";let g=await T.json();if(n.innerText=JSON.stringify(g),T.status!==200)throw new Error("An Error occurred while sending the manifest");if(!g.body||!g.body.updateSessions)throw new Error("Response body is invalid");let x=g.body.updateSessions;if(!Array.isArray(x))throw new Error("Update sessions not found in response body");c="update-sessions-received",n.innerText="",await Promise.all(x.map(async a=>{let o=await Promise.all(a.permittedChanges.map(async p=>{let k=this.app.vault.getAbstractFileByPath(p.path);if(!(k instanceof i.TFile))throw new Error(`File ${p.path} could not be read`);return{type:p.type,path:p.path,content:await this.app.vault.read(k)}})),h=await fetch(this.settings.backendUrl+"/update-batch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:a.id,updates:o})});if(n.innerText=n.innerText+`
`+a.id+`: 
`+JSON.stringify(await h.json()),h.status!==200)throw new Error("An Error occurred while sending updates");let v=(await h.json()).body;if(!Array.isArray(v))throw new Error("Invalid response body");v.forEach(p=>{u+=`${p.path}: ${p.status}
`})})),c="results-received"}catch(d){m=`Message: ${d.message} 
Stack: ${d.stack} 
Error: ${d}`,c="error"}}async startStatusUpdate(t,e){let n=setInterval(()=>{switch(t.innerText=c,c){case"started":t.innerText="Sending manifest",e.setAttribute("disabled","true"),e.innerText="Syncing...";break;case"manifest-sent":t.innerText="Waiting for update sessions";break;case"update-sessions-received":t.innerText=u;break;case"results-received":t.innerText=u,t.style.color="green",clearInterval(n),e.removeAttribute("disabled"),e.innerText="Restart sync";break;case"error":t.innerText=m,t.style.color="red",clearInterval(n),e.removeAttribute("disabled"),e.innerText="Restart sync";break}},1e3)}onClose(){let{contentEl:t}=this;t.empty(),c="not-started",m="",u=""}},S=class extends i.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new i.Setting(t).setName("Backend URL").setDesc("URL of the quartz_updater backend").addText(e=>e.setPlaceholder("Required!").setValue(this.plugin.settings.backendUrl).onChange(async n=>{this.plugin.settings.backendUrl=n,await this.plugin.saveSettings()}))}};
