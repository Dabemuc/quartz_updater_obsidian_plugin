/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var T=Object.create;var h=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,q=Object.prototype.hasOwnProperty;var A=(s,n)=>{for(var t in n)h(s,t,{get:n[t],enumerable:!0})},v=(s,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let a of x(n))!q.call(s,a)&&a!==t&&h(s,a,{get:()=>n[a],enumerable:!(e=U(n,a))||e.enumerable});return s};var M=(s,n,t)=>(t=s!=null?T(P(s)):{},v(n||!s||!s.__esModule?h(t,"default",{value:s,enumerable:!0}):t,s)),C=s=>v(h({},"__esModule",{value:!0}),s);var F={};A(F,{default:()=>u});module.exports=C(F);var r=require("obsidian"),E=require("crypto"),b=M(require("path")),R={backendUrl:""},u=class extends r.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("folder-sync","Quartz Sync",e=>{new y(this.app,this.settings).open()}).addClass("my-plugin-ribbon-class"),this.addCommand({id:"open-quartz-sync-modal",name:"Open quartz sync modal",callback:()=>{new y(this.app,this.settings).open()}}),this.addSettingTab(new f(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},R,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},i="not-started",k="",g="",y=class extends r.Modal{constructor(t,e){super(t);this.hashContent=t=>(0,E.createHash)("sha256").update(t).digest("hex");this.settings=e}onOpen(){let{contentEl:t}=this,e=t.createDiv("quartz-sync-modal");e.createEl("h2",{text:"Quartz Sync"}),e.createEl("p",{text:"This will attempt to sync all files marked with the quartz-sync=true frontmatter to the configured quartz_updater backend."}),e.createEl("button",{text:"Start sync"}).addEventListener("click",this.handleSync.bind(this)),e.createEl("h3",{text:"Sync status:"});let l=e.createEl("p",{text:i});this.startStatusUpdate(l)}async handleSync(){i="started";try{if(!this.settings.backendUrl||this.settings.backendUrl==="")throw new Error("Backend URL is not set");let t=this.app.vault.getMarkdownFiles().filter(o=>{var p;let c=(p=this.app.metadataCache.getFileCache(o))==null?void 0:p.frontmatter;return c&&c["quartz-sync"]===!0}),e=await Promise.all(t.map(async o=>{let c=this.app.vault.getAbstractFileByPath(o.path);if(!(c instanceof r.TFile))throw new Error(`File ${o.path} could not be read`);return{path:o.path,hash:this.hashContent(await this.app.vault.read(c))}}));i="manifest-built";let a=await fetch(b.join(this.settings.backendUrl,"/request-update"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({manifest:e})});i="manifest-sent";let l=await a.json();if(a.status!==200)throw new Error("An Error occurred while sending the manifest");if(!l.body||!l.body.updateSessions)throw new Error("Invalid response from backend");let m=l.body.updateSessions;if(!Array.isArray(m))throw new Error("Invalid response from backend");i="update-sessions-received",await Promise.all(m.map(async o=>{let c=await Promise.all(o.permittedChanges.map(async d=>{let S=this.app.vault.getAbstractFileByPath(d.path);if(!(S instanceof r.TFile))throw new Error(`File ${d.path} could not be read`);return{type:d.type,path:d.path,content:await this.app.vault.read(S)}})),p=await fetch(b.join(this.settings.backendUrl,"/update-batch"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:o.id,updates:c})});if(p.status!==200)throw new Error("An Error occurred while sending updates");let w=(await p.json()).body;if(!Array.isArray(w))throw new Error("Invalid response from backend");w.forEach(d=>{g+=`${d.path}: ${d.status}
`})})),i="results-received"}catch(t){k=t.message,i="error"}}async startStatusUpdate(t){let e=setInterval(()=>{switch(t.innerText=i,i){case"started":t.innerText="Sending manifest";break;case"manifest-sent":t.innerText="Waiting for update sessions";break;case"update-sessions-received":t.innerText=g;break;case"results-received":t.innerText=g,t.style.color="green",clearInterval(e);break;case"error":t.innerText=k,t.style.color="red",clearInterval(e);break}},1e3)}onClose(){let{contentEl:t}=this;t.empty()}},f=class extends r.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new r.Setting(t).setName("Backend URL").setDesc("URL of the quartz_updater backend").addText(e=>e.setPlaceholder("Required!").setValue(this.plugin.settings.backendUrl).onChange(async a=>{this.plugin.settings.backendUrl=a,await this.plugin.saveSettings()}))}};
