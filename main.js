/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var A=Object.prototype.hasOwnProperty;var P=(i,n)=>{for(var t in n)w(i,t,{get:n[t],enumerable:!0})},q=(i,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of M(n))!A.call(i,s)&&s!==t&&w(i,s,{get:()=>n[s],enumerable:!(e=U(n,s))||e.enumerable});return i};var C=i=>q(w({},"__esModule",{value:!0}),i);var L={};P(L,{default:()=>f});module.exports=C(L);var a=require("obsidian"),k=require("crypto"),R={backendUrl:""},f=class extends a.Plugin{async onload(){await this.loadSettings();let t=this.addRibbonIcon("folder-sync","Quartz Sync",e=>{new m(this.app,this.settings).open()});this.addCommand({id:"open-quartz-sync-modal",name:"Open quartz sync modal",callback:()=>{new m(this.app,this.settings).open()}}),this.addSettingTab(new S(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},R,await this.loadData())}async saveSettings(){this.settings.backendUrl.endsWith("/")&&(this.settings.backendUrl=this.settings.backendUrl.slice(0,-1)),await this.saveData(this.settings)}},r="not-started",g="",h="",m=class extends a.Modal{constructor(t,e){super(t);this.hashContent=t=>(0,k.createHash)("sha256").update(t).digest("hex");this.settings=e}onOpen(){let{contentEl:t}=this,e=t.createDiv("quartz-sync-modal");e.createEl("h2",{text:"Quartz Sync"}),e.createEl("p",{text:"This will attempt to sync all files marked with the quartz-sync=true frontmatter to the configured quartz_updater backend."});let s=e.createEl("button",{text:"Start sync"});e.createEl("h3",{text:"Sync status:"});let b=e.createEl("p",{text:r});e.createEl("h3",{text:"Client manifest generated:"});let c=e.createEl("p",{text:"..."});e.createEl("h3",{text:"Server response:"});let u=e.createEl("p",{text:"..."});s.addEventListener("click",()=>this.handleSync(b,s,u,c))}async handleSync(t,e,s,b){this.startStatusUpdate(t,e),g="",h="",r="started";try{if(!this.settings.backendUrl||this.settings.backendUrl==="")throw new Error("Backend URL is not set");let c=this.app.vault.getFiles().filter(o=>{var p;let d=(p=this.app.metadataCache.getFileCache(o))==null?void 0:p.frontmatter;return d&&d["quartz-sync"]==="true"}),u=await Promise.all(c.map(async o=>{let d=this.app.vault.getAbstractFileByPath(o.path);if(!(d instanceof a.TFile))throw new Error(`File ${o.path} could not be read`);return{path:o.path,hash:this.hashContent(await this.app.vault.read(d))}}));r="manifest-built",b.innerText+=`
 Generated Manifest: 
 ${JSON.stringify(u)}`;let T=await fetch(this.settings.backendUrl+"/request-update",{method:"POST",mode:"cors",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({manifest:u})});r="manifest-sent";let y=await T.json();if(s.innerText=JSON.stringify(y),T.status!==200)throw new Error("An Error occurred while sending the manifest");if(!y.body||!y.body.updateSessions)throw new Error("Response body is invalid");let x=y.body.updateSessions;if(!Array.isArray(x))throw new Error("Update sessions not found in response body");r="update-sessions-received",s.innerText="",await Promise.all(x.map(async o=>{let d=await Promise.all(o.permittedChanges.map(async l=>{let v=this.app.vault.getAbstractFileByPath(l.path);if(!(v instanceof a.TFile))throw new Error(`File ${l.path} could not be read`);return{type:l.type,path:l.path,content:await this.app.vault.read(v)}})),p=await fetch(this.settings.backendUrl+"/update-batch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:o.id,updates:d})});if(s.innerText=s.innerText+`
`+o.id+`: 
`+JSON.stringify(await p.json()),p.status!==200)throw new Error("An Error occurred while sending updates");let E=(await p.json()).body;if(!Array.isArray(E))throw new Error("Invalid response body");E.forEach(l=>{h+=`${l.path}: ${l.status}
`})})),r="results-received"}catch(c){g=`Message: ${c.message} 
Stack: ${c.stack} 
Error: ${c}`,r="error"}}async startStatusUpdate(t,e){let s=setInterval(()=>{switch(t.innerText=r,r){case"started":t.innerText="Sending manifest",e.setAttribute("disabled","true"),e.innerText="Syncing...";break;case"manifest-sent":t.innerText="Waiting for update sessions";break;case"update-sessions-received":t.innerText=h;break;case"results-received":t.innerText=h,t.style.color="green",clearInterval(s),e.removeAttribute("disabled"),e.innerText="Restart sync";break;case"error":t.innerText=g,t.style.color="red",clearInterval(s),e.removeAttribute("disabled"),e.innerText="Restart sync";break}},1e3)}onClose(){let{contentEl:t}=this;t.empty(),r="not-started",g="",h=""}},S=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new a.Setting(t).setName("Backend URL").setDesc("URL of the quartz_updater backend").addText(e=>e.setPlaceholder("Required!").setValue(this.plugin.settings.backendUrl).onChange(async s=>{this.plugin.settings.backendUrl=s,await this.plugin.saveSettings()}))}};
