/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var y=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var U=(i,n)=>{for(var t in n)y(i,t,{get:n[t],enumerable:!0})},x=(i,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of T(n))!E.call(i,s)&&s!==t&&y(i,s,{get:()=>n[s],enumerable:!(e=v(n,s))||e.enumerable});return i};var P=i=>x(y({},"__esModule",{value:!0}),i);var M={};U(M,{default:()=>u});module.exports=P(M);var a=require("obsidian"),k=require("crypto"),A={backendUrl:""},u=class extends a.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("folder-sync","Quartz Sync",e=>{new g(this.app,this.settings).open()}).addClass("my-plugin-ribbon-class"),this.addCommand({id:"open-quartz-sync-modal",name:"Open quartz sync modal",callback:()=>{new g(this.app,this.settings).open()}}),this.addSettingTab(new f(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},A,await this.loadData())}async saveSettings(){this.settings.backendUrl.endsWith("/")&&(this.settings.backendUrl=this.settings.backendUrl.slice(0,-1)),await this.saveData(this.settings)}},r="not-started",b="",h="",g=class extends a.Modal{constructor(t,e){super(t);this.hashContent=t=>(0,k.createHash)("sha256").update(t).digest("hex");this.settings=e}onOpen(){let{contentEl:t}=this,e=t.createDiv("quartz-sync-modal");e.createEl("h2",{text:"Quartz Sync"}),e.createEl("p",{text:"This will attempt to sync all files marked with the quartz-sync=true frontmatter to the configured quartz_updater backend."});let s=e.createEl("button",{text:"Start sync"});s.addEventListener("click",this.handleSync.bind(this)),e.createEl("h3",{text:"Sync status:"});let l=e.createEl("p",{text:r});b="",h="",r="started",this.startStatusUpdate(l,s)}async handleSync(){try{if(!this.settings.backendUrl||this.settings.backendUrl==="")throw new Error("Backend URL is not set");let t=this.app.vault.getMarkdownFiles().filter(o=>{var p;let c=(p=this.app.metadataCache.getFileCache(o))==null?void 0:p.frontmatter;return c&&c["quartz-sync"]===!0}),e=await Promise.all(t.map(async o=>{let c=this.app.vault.getAbstractFileByPath(o.path);if(!(c instanceof a.TFile))throw new Error(`File ${o.path} could not be read`);return{path:o.path,hash:this.hashContent(await this.app.vault.read(c))}}));r="manifest-built";let s=await fetch(this.settings.backendUrl+"/request-update",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({manifest:e})});r="manifest-sent";let l=await s.json();if(s.status!==200)throw new Error("An Error occurred while sending the manifest");if(!l.body||!l.body.updateSessions)throw new Error("Invalid response from backend");let m=l.body.updateSessions;if(!Array.isArray(m))throw new Error("Invalid response from backend");r="update-sessions-received",await Promise.all(m.map(async o=>{let c=await Promise.all(o.permittedChanges.map(async d=>{let S=this.app.vault.getAbstractFileByPath(d.path);if(!(S instanceof a.TFile))throw new Error(`File ${d.path} could not be read`);return{type:d.type,path:d.path,content:await this.app.vault.read(S)}})),p=await fetch(this.settings.backendUrl+"/update-batch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:o.id,updates:c})});if(p.status!==200)throw new Error("An Error occurred while sending updates");let w=(await p.json()).body;if(!Array.isArray(w))throw new Error("Invalid response from backend");w.forEach(d=>{h+=`${d.path}: ${d.status}
`})})),r="results-received"}catch(t){b=`Message: ${t.message} 
Stack: ${t.stack} 
Error: ${t}`,r="error"}}async startStatusUpdate(t,e){let s=setInterval(()=>{switch(t.innerText=r,r){case"started":t.innerText="Sending manifest",e.setAttribute("disabled","true"),e.innerText="Syncing...";break;case"manifest-sent":t.innerText="Waiting for update sessions";break;case"update-sessions-received":t.innerText=h;break;case"results-received":t.innerText=h,t.style.color="green",clearInterval(s),e.removeAttribute("disabled"),e.innerText="Restart sync";break;case"error":t.innerText=b,t.style.color="red",clearInterval(s),e.removeAttribute("disabled"),e.innerText="Restart sync";break}},1e3)}onClose(){let{contentEl:t}=this;t.empty()}},f=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new a.Setting(t).setName("Backend URL").setDesc("URL of the quartz_updater backend").addText(e=>e.setPlaceholder("Required!").setValue(this.plugin.settings.backendUrl).onChange(async s=>{this.plugin.settings.backendUrl=s,await this.plugin.saveSettings()}))}};
