/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var w=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var A=Object.prototype.hasOwnProperty;var P=(a,s)=>{for(var t in s)w(a,t,{get:s[t],enumerable:!0})},q=(a,s,t,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let n of M(s))!A.call(a,n)&&n!==t&&w(a,n,{get:()=>s[n],enumerable:!(e=U(s,n))||e.enumerable});return a};var C=a=>q(w({},"__esModule",{value:!0}),a);var R={};P(R,{default:()=>f});module.exports=C(R);var r=require("obsidian"),v=require("crypto"),L={backendUrl:""},f=class extends r.Plugin{async onload(){await this.loadSettings();let t=this.addRibbonIcon("folder-sync","Quartz Sync",e=>{new b(this.app,this.settings).open()});this.addCommand({id:"open-quartz-sync-modal",name:"Open quartz sync modal",callback:()=>{new b(this.app,this.settings).open()}}),this.addSettingTab(new S(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},L,await this.loadData())}async saveSettings(){this.settings.backendUrl.endsWith("/")&&(this.settings.backendUrl=this.settings.backendUrl.slice(0,-1)),await this.saveData(this.settings)}},i="not-started",m="",h="",b=class extends r.Modal{constructor(t,e){super(t);this.hashContent=t=>(0,v.createHash)("sha256").update(t).digest("hex");this.settings=e}onOpen(){let{contentEl:t}=this,e=t.createDiv("quartz-sync-modal");e.createEl("h2",{text:"Quartz Sync"}),e.createEl("p",{text:"This will attempt to sync all files marked with the quartz-sync=true frontmatter to the configured quartz_updater backend."});let n=e.createEl("button",{text:"Start sync"});e.createEl("h3",{text:"Sync status:"});let u=e.createEl("p",{text:i});e.createEl("h3",{text:"Client manifest generated:"});let d=e.createEl("p",{text:"..."});e.createEl("h3",{text:"Server response:"});let y=e.createEl("p",{text:"..."});n.addEventListener("click",()=>this.handleSync(u,n,y,d))}async handleSync(t,e,n,u){this.startStatusUpdate(t,e),m="",h="",i="started";try{if(!this.settings.backendUrl||this.settings.backendUrl==="")throw new Error("Backend URL is not set");let d=this.app.vault.getFiles().filter(o=>{var c;let l=(c=this.app.metadataCache.getFileCache(o))==null?void 0:c.frontmatter;return l&&l["quartz-sync"]==="true"}),y=await Promise.all(d.map(async o=>{let l=await this.app.vault.read(o);u.innerText+=`
 Content of ${o.path}: 
 ${l}`;let c=this.hashContent(l);return{path:o.path,hash:c}}));i="manifest-built",u.innerText+=`
 Generated Manifest: 
 ${JSON.stringify(y)}`;let T=await fetch(this.settings.backendUrl+"/request-update",{method:"POST",mode:"cors",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({manifest:y})});i="manifest-sent";let g=await T.json();if(n.innerText=JSON.stringify(g),T.status!==200)throw new Error("An Error occurred while sending the manifest");if(!g.body||!g.body.updateSessions)throw new Error("Response body is invalid");let x=g.body.updateSessions;if(!Array.isArray(x))throw new Error("Update sessions not found in response body");i="update-sessions-received",n.innerText="",await Promise.all(x.map(async o=>{let l=await Promise.all(o.permittedChanges.map(async p=>{let k=this.app.vault.getAbstractFileByPath(p.path);if(!(k instanceof r.TFile))throw new Error(`File ${p.path} could not be read`);return{type:p.type,path:p.path,content:await this.app.vault.read(k)}})),c=await fetch(this.settings.backendUrl+"/update-batch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:o.id,updates:l})});if(n.innerText=n.innerText+`
`+o.id+`: 
`+JSON.stringify(await c.json()),c.status!==200)throw new Error("An Error occurred while sending updates");let E=(await c.json()).body;if(!Array.isArray(E))throw new Error("Invalid response body");E.forEach(p=>{h+=`${p.path}: ${p.status}
`})})),i="results-received"}catch(d){m=`Message: ${d.message} 
Stack: ${d.stack} 
Error: ${d}`,i="error"}}async startStatusUpdate(t,e){let n=setInterval(()=>{switch(t.innerText=i,i){case"started":t.innerText="Sending manifest",e.setAttribute("disabled","true"),e.innerText="Syncing...";break;case"manifest-sent":t.innerText="Waiting for update sessions";break;case"update-sessions-received":t.innerText=h;break;case"results-received":t.innerText=h,t.style.color="green",clearInterval(n),e.removeAttribute("disabled"),e.innerText="Restart sync";break;case"error":t.innerText=m,t.style.color="red",clearInterval(n),e.removeAttribute("disabled"),e.innerText="Restart sync";break}},1e3)}onClose(){let{contentEl:t}=this;t.empty(),i="not-started",m="",h=""}},S=class extends r.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new r.Setting(t).setName("Backend URL").setDesc("URL of the quartz_updater backend").addText(e=>e.setPlaceholder("Required!").setValue(this.plugin.settings.backendUrl).onChange(async n=>{this.plugin.settings.backendUrl=n,await this.plugin.saveSettings()}))}};
