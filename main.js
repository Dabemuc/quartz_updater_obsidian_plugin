/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var m=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var U=Object.getOwnPropertyNames;var M=Object.prototype.hasOwnProperty;var A=(i,n)=>{for(var t in n)m(i,t,{get:n[t],enumerable:!0})},P=(i,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of U(n))!M.call(i,s)&&s!==t&&m(i,s,{get:()=>n[s],enumerable:!(e=E(n,s))||e.enumerable});return i};var q=i=>P(m({},"__esModule",{value:!0}),i);var F={};A(F,{default:()=>y});module.exports=q(F);var a=require("obsidian"),x=require("crypto"),R={backendUrl:""},y=class extends a.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("folder-sync","Quartz Sync",e=>{new g(this.app,this.settings).open()}).addClass("my-plugin-ribbon-class"),this.addCommand({id:"open-quartz-sync-modal",name:"Open quartz sync modal",callback:()=>{new g(this.app,this.settings).open()}}),this.addSettingTab(new w(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},R,await this.loadData())}async saveSettings(){this.settings.backendUrl.endsWith("/")&&(this.settings.backendUrl=this.settings.backendUrl.slice(0,-1)),await this.saveData(this.settings)}},o="not-started",f="",u="",C="",g=class extends a.Modal{constructor(t,e){super(t);this.hashContent=t=>(0,x.createHash)("sha256").update(t).digest("hex");this.settings=e}onOpen(){let{contentEl:t}=this,e=t.createDiv("quartz-sync-modal");e.createEl("h2",{text:"Quartz Sync"}),e.createEl("p",{text:"This will attempt to sync all files marked with the quartz-sync=true frontmatter to the configured quartz_updater backend."});let s=e.createEl("button",{text:"Start sync"});e.createEl("h3",{text:"Sync status:"});let c=e.createEl("p",{text:o}),b=e.createEl("p",{text:C});s.addEventListener("click",()=>this.handleSync(c,s,b))}async handleSync(t,e,s){this.startStatusUpdate(t,e),f="",u="",o="started";try{if(!this.settings.backendUrl||this.settings.backendUrl==="")throw new Error("Backend URL is not set");let c=this.app.vault.getMarkdownFiles().filter(r=>{var p;let d=(p=this.app.metadataCache.getFileCache(r))==null?void 0:p.frontmatter;return d&&d["quartz-sync"]===!0}),b=await Promise.all(c.map(async r=>{let d=this.app.vault.getAbstractFileByPath(r.path);if(!(d instanceof a.TFile))throw new Error(`File ${r.path} could not be read`);return{path:r.path,hash:this.hashContent(await this.app.vault.read(d))}}));o="manifest-built";let S=await fetch(this.settings.backendUrl+"/request-update",{method:"POST",mode:"cors",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({manifest:b})});o="manifest-sent";let h=await S.json();if(s.innerText=JSON.stringify(h),S.status!==200)throw new Error("An Error occurred while sending the manifest");if(!h.body||!h.body.updateSessions)throw new Error("Response body is invalid");let T=h.body.updateSessions;if(!Array.isArray(T))throw new Error("Update sessions not found in response body");o="update-sessions-received",s.innerText="",await Promise.all(T.map(async r=>{let d=await Promise.all(r.permittedChanges.map(async l=>{let v=this.app.vault.getAbstractFileByPath(l.path);if(!(v instanceof a.TFile))throw new Error(`File ${l.path} could not be read`);return{type:l.type,path:l.path,content:await this.app.vault.read(v)}})),p=await fetch(this.settings.backendUrl+"/update-batch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:r.id,updates:d})});if(s.innerText=s.innerText+`
`+r.id+`: 
`+JSON.stringify(await p.json()),p.status!==200)throw new Error("An Error occurred while sending updates");let k=(await p.json()).body;if(!Array.isArray(k))throw new Error("Invalid response body");k.forEach(l=>{u+=`${l.path}: ${l.status}
`})})),o="results-received"}catch(c){f=`Message: ${c.message} 
Stack: ${c.stack} 
Error: ${c}`,o="error"}}async startStatusUpdate(t,e){let s=setInterval(()=>{switch(t.innerText=o,o){case"started":t.innerText="Sending manifest",e.setAttribute("disabled","true"),e.innerText="Syncing...";break;case"manifest-sent":t.innerText="Waiting for update sessions";break;case"update-sessions-received":t.innerText=u;break;case"results-received":t.innerText=u,t.style.color="green",clearInterval(s),e.removeAttribute("disabled"),e.innerText="Restart sync";break;case"error":t.innerText=f,t.style.color="red",clearInterval(s),e.removeAttribute("disabled"),e.innerText="Restart sync";break}},1e3)}onClose(){let{contentEl:t}=this;t.empty()}},w=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new a.Setting(t).setName("Backend URL").setDesc("URL of the quartz_updater backend").addText(e=>e.setPlaceholder("Required!").setValue(this.plugin.settings.backendUrl).onChange(async s=>{this.plugin.settings.backendUrl=s,await this.plugin.saveSettings()}))}};
