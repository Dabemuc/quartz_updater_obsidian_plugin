/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var b=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var U=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var A=(r,n)=>{for(var t in n)b(r,t,{get:n[t],enumerable:!0})},M=(r,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of U(n))!x.call(r,s)&&s!==t&&b(r,s,{get:()=>n[s],enumerable:!(e=E(n,s))||e.enumerable});return r};var P=r=>M(b({},"__esModule",{value:!0}),r);var R={};A(R,{default:()=>h});module.exports=P(R);var a=require("obsidian"),T=require("crypto"),q={backendUrl:""},h=class extends a.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("folder-sync","Quartz Sync",e=>{new u(this.app,this.settings).open()}).addClass("my-plugin-ribbon-class"),this.addCommand({id:"open-quartz-sync-modal",name:"Open quartz sync modal",callback:()=>{new u(this.app,this.settings).open()}}),this.addSettingTab(new f(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},q,await this.loadData())}async saveSettings(){this.settings.backendUrl.endsWith("/")&&(this.settings.backendUrl=this.settings.backendUrl.slice(0,-1)),await this.saveData(this.settings)}},i="not-started",m="",p="",u=class extends a.Modal{constructor(t,e){super(t);this.hashContent=t=>(0,T.createHash)("sha256").update(t).digest("hex");this.settings=e}onOpen(){let{contentEl:t}=this,e=t.createDiv("quartz-sync-modal");e.createEl("h2",{text:"Quartz Sync"}),e.createEl("p",{text:"This will attempt to sync all files marked with the quartz-sync=true frontmatter to the configured quartz_updater backend."});let s=e.createEl("button",{text:"Start sync"}),g=e.createEl("p",{text:i});s.addEventListener("click",()=>this.handleSync(g,s)),e.createEl("h3",{text:"Sync status:"})}async handleSync(t,e){this.startStatusUpdate(t,e),m="",p="",i="started";try{if(!this.settings.backendUrl||this.settings.backendUrl==="")throw new Error("Backend URL is not set");let s=this.app.vault.getMarkdownFiles().filter(o=>{var l;let c=(l=this.app.metadataCache.getFileCache(o))==null?void 0:l.frontmatter;return c&&c["quartz-sync"]===!0}),g=await Promise.all(s.map(async o=>{let c=this.app.vault.getAbstractFileByPath(o.path);if(!(c instanceof a.TFile))throw new Error(`File ${o.path} could not be read`);return{path:o.path,hash:this.hashContent(await this.app.vault.read(c))}}));i="manifest-built";let w=await fetch(this.settings.backendUrl+"/request-update",{method:"POST",mode:"cors",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({manifest:g})});i="manifest-sent";let y=await w.json();if(w.status!==200)throw new Error("An Error occurred while sending the manifest");if(!y.body||!y.body.updateSessions)throw new Error("Invalid response from backend");let S=y.body.updateSessions;if(!Array.isArray(S))throw new Error("Invalid response from backend");i="update-sessions-received",await Promise.all(S.map(async o=>{let c=await Promise.all(o.permittedChanges.map(async d=>{let v=this.app.vault.getAbstractFileByPath(d.path);if(!(v instanceof a.TFile))throw new Error(`File ${d.path} could not be read`);return{type:d.type,path:d.path,content:await this.app.vault.read(v)}})),l=await fetch(this.settings.backendUrl+"/update-batch",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:o.id,updates:c})});if(l.status!==200)throw new Error("An Error occurred while sending updates");let k=(await l.json()).body;if(!Array.isArray(k))throw new Error("Invalid response from backend");k.forEach(d=>{p+=`${d.path}: ${d.status}
`})})),i="results-received"}catch(s){m=`Message: ${s.message} 
Stack: ${s.stack} 
Error: ${s}`,i="error"}}async startStatusUpdate(t,e){let s=setInterval(()=>{switch(t.innerText=i,i){case"started":t.innerText="Sending manifest",e.setAttribute("disabled","true"),e.innerText="Syncing...";break;case"manifest-sent":t.innerText="Waiting for update sessions";break;case"update-sessions-received":t.innerText=p;break;case"results-received":t.innerText=p,t.style.color="green",clearInterval(s),e.removeAttribute("disabled"),e.innerText="Restart sync";break;case"error":t.innerText=m,t.style.color="red",clearInterval(s),e.removeAttribute("disabled"),e.innerText="Restart sync";break}},1e3)}onClose(){let{contentEl:t}=this;t.empty()}},f=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new a.Setting(t).setName("Backend URL").setDesc("URL of the quartz_updater backend").addText(e=>e.setPlaceholder("Required!").setValue(this.plugin.settings.backendUrl).onChange(async s=>{this.plugin.settings.backendUrl=s,await this.plugin.saveSettings()}))}};
